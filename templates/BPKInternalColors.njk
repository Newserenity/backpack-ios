/*
 * Backpack - Skyscanner's Design System
 *
 * Copyright 2018 Skyscanner Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import UIKit

/// Backpack Internal Colors
/// These colors are internal on purpose and can only be used by Backpack components
/// Do not use these colors in your own designs.

// swiftlint:disable bpk_use_colour_token
// swiftlint:disable identifier_name
// swiftlint:disable indentation_width
internal extension BPKColor {

    private static var dynamicColorsCache = NSCache<NSString, UIColor>()
    
    static func dynamicColor(lightVariant: UIColor, darkVariant: UIColor) -> UIColor {
        // 1. Build a cache key
        let key = "\(lightVariant.cacheKey)_\(darkVariant.cacheKey)" as NSString
            
            // 2. Return cached if we have it
            if let cached = dynamicColorsCache.object(forKey: key) {
                return cached
            }
            
            // 3. Create the dynamic provider
            let dynamic = UIColor { traitCollection in
                traitCollection.userInterfaceStyle == .dark ? darkVariant : lightVariant
            }
            
            // 4. Cache & return
            dynamicColorsCache.setObject(dynamic, forKey: key)
            return dynamic
    }
{% for c in internalColor %}
    /// The `{{c.name}}` internal color.
    {% if c.deprecated %}@available(*, deprecated, message: "This colour will be removed in the next major version"){% endif %}
    static let {{c.name}} = BPKColor.dynamicColor(
        lightVariant: UIColor(red: {{c.value.r}}, green: {{c.value.g}}, blue: {{c.value.b}}, alpha: {{c.value.a}}),
        darkVariant: UIColor(red: {{c.darkValue.r}}, green: {{c.darkValue.g}}, blue: {{c.darkValue.b}}, alpha: {{c.darkValue.a}}))
{% endfor %}}

private extension UIColor {
    /// A crude cache-key generator: e.g. “#RRGGBBAA”
    var cacheKey: String {
        var red: CGFloat = 0
        var green: CGFloat = 0
        var blue: CGFloat = 0
        var alpha: CGFloat = 0

        guard self.getRed(&red, green: &green, blue: &blue, alpha: &alpha) else {
            return "non-rgb-color:\(self.description)"
        }

        return String(format: "#%02X%02X%02X%02X",
                      Int(round(red * 255)),
                      Int(round(green * 255)),
                      Int(round(blue * 255)),
                      Int(round(alpha * 255)))
    }
}

